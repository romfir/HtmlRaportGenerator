@inject IPreviousState<HourWithQuarter> previousStateService

<Modal @ref="_modalRef" Closing="OnModalClosingInternal">
    <ModalContent Centered="true" Size="ModalSize.Small">
        <ModalHeader>
            <Heading Size="HeadingSize.Is1" Alignment="TextAlignment.Center">
                <ModalTitle>
                    @_title
                </ModalTitle>
            </Heading>

            <CloseButton Clicked="async () => await RestoreEditedOrSendNewAsync().ConfigureAwait(false)" />
        </ModalHeader>
        <ModalBody>
            <Validations Mode="ValidationMode.Auto" Model="@_dataToEdit" @ref="_validations">
                <Validation>
                    <Field>
                        <FieldLabel>Hour</FieldLabel>
                        <Select TValue="int?" @bind-SelectedValue="_dataToEdit.Hour">
                            <ChildContent>
                                @foreach (int i in Enumerable.Range(0, 24))
                                        {
                                <SelectItem Value="@i">@i</SelectItem>
                                }
                            </ChildContent>
                            <Feedback>
                                <ValidationNone />
                                <ValidationSuccess />
                                <ValidationError />
                            </Feedback>
                        </Select>
                    </Field>
                </Validation>
                <Validation>
                    <Field>
                        <FieldLabel>Minutes</FieldLabel>
                        <Select TValue="int?" @bind-SelectedValue="_dataToEdit.Quarter">
                            <ChildContent>
                                @foreach (int i in Enumerable.Range(0, 4))
                                        {
                                <SelectItem Value="@i">@(i*15)</SelectItem>
                                }
                            </ChildContent>
                            <Feedback>
                                <ValidationNone />
                                <ValidationSuccess />
                                <ValidationError />
                            </Feedback>
                        </Select>
                    </Field>
                </Validation>
            </Validations>
        </ModalBody>
        <ModalFooter>
            <Tooltip Text=@((!_isObjectNew && !previousStateService.IsValueChanged()) ? "Unchanged Data" : null) Placement="Placement.Top" Margin="Margin.IsAuto">
                <Button Color="Color.Primary" Clicked="SubmitAsync" Disabled="!_isObjectNew && !previousStateService.IsValueChanged()">Submit</Button>
            </Tooltip>
            <Button Color="Color.Secondary" Clicked="CancelAsync" Margin="Margin.IsAuto">Cancel</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {
    [Parameter]
    public EventCallback OnFormSubmitted { get; set; }

    [Parameter]
    public EventCallback<HourWithQuarter?> OnFormCancell { get; set; }

    [Parameter]
    public EventCallback HoursHaveChanged { get; set; }

    private HourWithQuarter _dataToEdit { get; set; } = null!;

    private Modal _modalRef = null!;

    private Validations? _validations;

    private string _title = null!;

    private bool _isObjectNew;

    private async Task SubmitAsync()
    {
        if (_validations!.ValidateAll())
        {
            HideModal();

            await OnFormSubmitted.InvokeAsync();
        }
    }

    private void HideModal()
        => _modalRef.Hide();

    public void ShowModal(string title, HourWithQuarter existingHour, bool isObjectNew)
    {
        _isObjectNew = isObjectNew;

        existingHour.PropertyChanged += async (s, e) => await HoursHaveChanged.InvokeAsync();

        previousStateService.Load(existingHour);

        _dataToEdit = existingHour;

        ShowModal(title);
    }

    private void ShowModal(string title)
    {
        _title = title;

        _modalRef.Show();
    }

    private async Task CancelAsync()
    {
        HideModal();

        await RestoreEditedOrSendNewAsync().ConfigureAwait(false);
    }

    private async Task RestoreEditedOrSendNewAsync()
    {
        if (_isObjectNew)
        {
            await OnFormCancell.InvokeAsync(_dataToEdit).ConfigureAwait(false);
        }
        else if (previousStateService.IsValueChanged())
        {
            await RestoreOriginalStateAsync();
            await OnFormCancell.InvokeAsync(null).ConfigureAwait(false);
        }
    }

    protected override void OnParametersSet()
    {
        if (_dataToEdit is null)
        {
            _dataToEdit = new HourWithQuarter(DateTime.Now);
        }
    }

    private void OnModalClosingInternal(ModalClosingEventArgs e)
    {
        if (e.CloseReason == CloseReason.FocusLostClosing)
        {
            e.Cancel = true;
        }
    }

    private Task RestoreOriginalStateAsync()
    {
        previousStateService.Rollback();
        return HoursHaveChanged.InvokeAsync();
    }
 }
