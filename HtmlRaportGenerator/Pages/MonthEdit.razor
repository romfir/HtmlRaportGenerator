@attribute [RouteAttribute("/" + RelativePageUrls.MonthEdit + "/{Month:datetime?}")]

@inject NavigationManager Nav
@inject ILocalStorageService localStorage
@inject MonthStateService stateService

<div class="container">
    <div class="row justify-content-center">
        <h1>
            <input type="month" @bind="MonthForInput" />
        </h1>
    </div>
</div>



@if (Month is null)
{
    <p><em>Please choose a month</em></p>
}
else if (Days is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Model="@_daysCollectionValidationModel" OnValidSubmit="@HandleValidSubmitAsync">
        <ObjectGraphDataAnnotationsValidator />

        <div class="table-responsive">
            <table class="table table-striped table-sm table-bordered">
                <thead class="thead-dark">
                    <tr>
                        <th>
                            <div class="col text-center">
                                <label>Day of month</label>
                            </div>
                        </th>
                        <th>
                            <div class="col text-center">
                                <label>Start time</label>
                            </div>
                        </th>
                        <th>
                            <div class="col text-center">
                                <label>End time</label>
                            </div>
                        </th>
                        <th>
                            <div class="col text-center">
                                <label>Hours Sum</label>
                            </div>
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (Day day in Days.OrderBy(d => d.DayNumber))
                    {

                        <DayListItem CurrentDate="new DateTime(Month.Value.Year, Month.Value.Month, day.DayNumber)"
                             CurrentDay="day"
                             HoursHaveChanged="() =>
                                                            {
                                                                UpdateHourSum();
                                                                StateHasChanged();
                                                            }"
                             InputNumberMode="_inputMode" />
                    }
                </tbody>
                <tfoot class="tfoot-dark">
                    <tr>
                        <td></td>
                        <td></td>
                        <td><b>Sum:</b></td>
                        <td>@HoursSum</td>
                    </tr>

                </tfoot>
            </table>
        </div>
        <div class="container">
            <div class="row">
                <div class="col text-center">
                    <button type="submit" class="btn btn-primary col">Save</button>
                </div>
                <div class="col text-center">
                    <button class="btn btn-primary col" @onclick="SwitchInputsAsync">@InputModeName</button>
                </div>
            </div>
        </div>
    </EditForm>
}

@code {
    [Parameter]
    public DateTime? Month { get; set; }

    public DateTime? MonthForInput
    {
        get => Month;
        set
        {
            _daysCollectionValidationModel.Days = null!;
            ChangeUrl(value);
        }
    }

    private bool _inputMode;

    private string InputModeName
        => _inputMode ? "Switch to modals" : "Switch to inputs";

    private DaysCollectionValidationModel _daysCollectionValidationModel = new();

    private IEnumerable<Day>? Days
                => _daysCollectionValidationModel.Days;

    private double HoursSum { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _inputMode = await localStorage.GetItemAsync<bool>(StaticHelpers.InputKey);
    }

    protected override Task OnParametersSetAsync()
    {
        Month ??= DateTime.Now;

        return UpdateCalendarGridAsync();
    }

    private async Task UpdateCalendarGridAsync()
    {
        List<Day> days = await stateService.GetAsync(Month!.Value.ToString(StaticHelpers.YearMonthFormat)) ?? new();

        foreach (DateTime day in Month.Value.AllDatesInMonth())
        {
            Day? dayItem = days.FirstOrDefault(d => d.DayNumber == day.Day);
            if (dayItem is null)
            {
                dayItem = new Day(day.Day, day.DayOfWeek is DayOfWeek.Saturday or DayOfWeek.Sunday);
                days.Add(dayItem);
            }

            dayItem.IsToday = false;
            if (DateTime.Now.Date == day.Date)
            {
                dayItem!.IsToday = true;
            }
        }

        _daysCollectionValidationModel.Days = days;

        UpdateHourSum();
        StateHasChanged();
    }

    private void UpdateHourSum()
        => HoursSum = Days!.Sum(d => d.HourSum ?? 0);

    void ChangeUrl(DateTime? d)
    {
        if (d is object)
        {
            Nav.NavigateTo($"{RelativePageUrls.MonthEdit}/{d:yyyy-MM}");
        }
        else
        {
            Nav.NavigateTo(RelativePageUrls.MonthEdit);
        }
    }

    private async Task HandleValidSubmitAsync()
            => await stateService.SaveAsync(Preconditions.CheckNotNull(Days!, nameof(Days)).Where(d => d.AnyRelevantValueExists()).ToList(), Month!.Value.ToString(StaticHelpers.YearMonthFormat));

    private async Task SwitchInputsAsync()
    {
        _inputMode = !_inputMode;

        await localStorage.SetItemAsync(StaticHelpers.InputKey, _inputMode);
    }
}
