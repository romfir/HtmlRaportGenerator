@attribute [RouteAttribute("/" + RelativePageUrls.MonthEdit + "/{Month:datetime?}")]

@inject NavigationManager _nav
@inject ILocalStorageService _localStorage
@inject MonthStateService _stateService
@inject IPreviousState<ICollection<Day>> _previousStateDayService

@*todo buttons prev + next month that inc/dec CurrentPage*@
<Row Margin="Margin.Is2.FromTop.Is4.FromTop">
	<Column ColumnSize="ColumnSize.IsAuto" Margin="Margin.IsAuto">
		<Heading Size="HeadingSize.Is1" Alignment="TextAlignment.Center">
			<DateEdit TValue="DateTime?" @bind-Date="@MonthForInput" />
		</Heading>
	</Column>
</Row>

@if (Month is null)
{
	<Row Margin="Margin.Is4.FromTop">
	 <Column ColumnSize="ColumnSize.IsAuto" Margin="Margin.IsAuto">
	  <Heading Size="HeadingSize.Is1" Alignment="TextAlignment.Center">Please choose a month</Heading>
	 </Column>
	</Row>
}
else
{
	<DataGrid TItem="Day"
		  CurrentPage="CurrentPage"
		  ShowCaptions="true"
		  CommandMode="DataGridCommandMode.Default"
		  Editable="true"
		  Data="_days"
		  Striped="true"
		  Bordered="true"
		  Hoverable="true"
		  Responsive="true"
		  Sortable="false"
		  SortMode="DataGridSortMode.Single"
		  UseInternalEditing="true"
		  EditMode="DataGridEditMode.Inline"
		  RowRemoving="OnRowRemoving"
		  RowStyling="OnRowStyling"
		  Narrow="true"
		  ShowValidationFeedback="true"
		  AggregateData="_days"
		  ReadData="OnReadDataAsync">

	 <DataGridAggregates>
	  <DataGridAggregate TItem="Day"
						   Field="@nameof(Day.HourSum)"
						   Aggregate="DataGridAggregateType.Sum"
						   DisplayFormat="Hour Sum: {0}" />
	 </DataGridAggregates>

	 <DataGridColumns>
	  <DataGridCommandColumn TItem="Day" Width="170px">
	   <NewCommandTemplate>
	   </NewCommandTemplate>
	   <EditCommandTemplate>
		<Button Color="Color.Primary" Clicked="@context.Clicked">
						@context.LocalizationString
		</Button>
	   </EditCommandTemplate>
	   <SaveCommandTemplate>
		<Button Color="Color.Primary" Clicked="() =>
{
    context.Clicked.InvokeAsync();
    _previousStateDayService.UpdateIsValueChanged();
    StateHasChanged();
}">
						@context.LocalizationString
		</Button>
	   </SaveCommandTemplate>
	   <DeleteCommandTemplate>
					@if (context.Item.AnyRelevantValueExists())
					{
	<Button Color="Color.Danger" Clicked="context.Clicked">Clear</Button>
				}
			</DeleteCommandTemplate>
			<CancelCommandTemplate>
				<Button Color="Color.Secondary" Clicked="context.Clicked">
					@context.LocalizationString
				</Button>
			</CancelCommandTemplate>
			<ClearFilterCommandTemplate>
				<Button Color="Color.Warning" Clicked="context.Clicked">
					@context.LocalizationString
				</Button>
			</ClearFilterCommandTemplate>
		</DataGridCommandColumn>
		<DataGridNumericColumn TItem="Day"
							   Field="@nameof(Day.DayNumber)"
							   Caption="Day of Month"
							   Readonly="true"
							   HeaderTextAlignment="TextAlignment.Center"
							   TextAlignment="TextAlignment.Center">
			<DisplayTemplate>
				<Text Alignment="TextAlignment.Center">
					@context.DayNumber
				</Text>
			</DisplayTemplate>
		</DataGridNumericColumn>
		<DataGridNumericColumn TItem="Day"
							   Field="@nameof(Day.HourWithQuarterFromParsed)"
							   Caption="Start Time"
							   Editable="true"
							   HeaderTextAlignment="TextAlignment.Center"
							   TextAlignment="TextAlignment.Center">
			<DisplayTemplate>
				@if (context.HourWithQuarterFromParsed is not null)
					{
	<TimeEdit Style="text-align:center;"
						  TValue="TimeSpan?"
						  Time="TimeSpan.FromHours((double)context.HourWithQuarterFromParsed)"
						  ReadOnly="true" />
				}
			</DisplayTemplate>

			<EditTemplate>
				<TimeEdit Style="text-align:center;"
						  TValue="TimeSpan?"
						  Time="(context.CellValue is not null ? TimeSpan.FromHours((double)context.CellValue) : null)"
						  DelayTextOnKeyPress="true"
						  DelayTextOnKeyPressInterval="300"
						  step="900"
						  TimeChanged="@(v => context.CellValue = v?.TotalHours)" />
			</EditTemplate>
		</DataGridNumericColumn>

		<DataGridNumericColumn TItem="Day"
							   Field="@nameof(Day.HourWithQuarterToParsed)"
							   Caption="End Time"
							   Editable="true"
							   HeaderTextAlignment="TextAlignment.Center"
							   TextAlignment="TextAlignment.Center">
			<DisplayTemplate>
				@if (context.HourWithQuarterToParsed is not null)
					{
	<TimeEdit Style="text-align:center;"
						  TValue="TimeSpan?"
						  Time="TimeSpan.FromHours((double)context.HourWithQuarterToParsed)"
						  ReadOnly="true" />
				}
			</DisplayTemplate>
			<EditTemplate>
				<TimeEdit Style="text-align:center;"
						  TValue="TimeSpan?"
						  Time="(context.CellValue is not null ? TimeSpan.FromHours((double)context.CellValue) : null)"
						  DelayTextOnKeyPress="true"
						  DelayTextOnKeyPressInterval="300"
						  step="900"
						  TimeChanged="@(v => context.CellValue = v?.TotalHours)" />
			</EditTemplate>
		</DataGridNumericColumn>

		<DataGridNumericColumn TItem="Day"
							   Field="@nameof(Day.HourSum)"
							   Caption="Hours Sum"
							   HeaderTextAlignment="TextAlignment.Center"
							   TextAlignment="TextAlignment.Center">
			<DisplayTemplate>
				<Text Alignment="TextAlignment.Center">
					@context.HourSum?.FormatDoubleToTime()
				</Text>
			</DisplayTemplate>
			<EditTemplate>
				<Text Alignment="TextAlignment.Center">
					@context.Item.HourSum?.FormatDoubleToTime()
				</Text>
			</EditTemplate>
		</DataGridNumericColumn>
	</DataGridColumns>
	<LoadingTemplate>
		<ProgressBar Visible="true" />
	</LoadingTemplate>

</DataGrid>

	<Row Margin="Margin.Is4.FromBottom">
	 <Column ColumnSize="ColumnSize.IsAuto" Margin="Margin.IsAuto">
	  <Tooltip Text=@(_previousStateDayService.IsValueChanged() ? null : "Unchanged Data") Placement="Placement.Top" Margin="Margin.IsAuto">
	   <Button Color="Color.Primary" Loading="_isTableSaving" Disabled="_isTableSaving || !_previousStateDayService.IsValueChanged()" Clicked="HandleValidSubmitAsync">
					@SaveButtonText
	   </Button>
	  </Tooltip>
	 </Column>
	 <Column ColumnSize="ColumnSize.IsAuto" Margin="Margin.IsAuto">
	  <Tooltip Text=@(_previousStateDayService.IsValueChanged() ? null : "Unchanged Data") Placement="Placement.Top" Margin="Margin.IsAuto">
	   <Button Color="Color.Danger" Disabled="_isTableSaving || !_previousStateDayService.IsValueChanged()" Clicked="_previousStateDayService.Rollback">
		Clear Changes
	   </Button>
	  </Tooltip>
	 </Column>
	</Row>
}

@code {

	//private Day _selectedDay = null!;

	[Parameter]
	public DateTime? Month { get; set; }

	public DateTime? MonthForInput
	{
		get => Month;
		set
		{
			if (UrlChanged(value))
			{
				_days = null!;
				//ChangeUrl(value);
				Month = value;
				CurrentPage = Month.Value.Year * 100 + Month.Value.Month;
			}
			else
			{
				//temporary till I get input type month working, just to keep datepicker correct state
				Month = value;
			}
		}
	}

	private List<Day>? _days;

	private int CurrentPage { get; set; } //todo only for initial load


	private bool _isTableSaving;

	private string SaveButtonText
		=> _isTableSaving ? "Saving..." : "Save Changes";

	protected override void OnParametersSet()
	{
		Month ??= DateTime.Now;

		CurrentPage = Month.Value.Year * 100 + Month.Value.Month; //todo toolsy
	}

	private static void OnRowStyling(Day model, DataGridRowStyling styling)
	{
		if (model.IsToday)
		{
			styling.Color = Color.Warning;
		}
		else if (model.IsHoliday)
		{
			styling.Color = Color.Info;
		}
	}

	private void OnRowRemoving(CancellableRowChange<Day> rowChange)
	{
		rowChange.Cancel = true;

		rowChange.Item.From.Clear();
		rowChange.Item.To.Clear();

		_previousStateDayService.UpdateIsValueChanged();
	}

	private int _prevPage;
	private Task OnReadDataAsync(DataGridReadDataEventArgs<Day> e)
	{
		//unnecesary? Both?> Only sec part to remove?
		if (e.Page < 100000 || e.Page == _prevPage)
		{
			Console.WriteLine(e.Page);
			return Task.CompletedTask;
		}
		_prevPage = e.Page;

		//todo is it possible to sort in context of a single page?

		//it can be done manually ofc

		_days = null!;

		//todo only if changed
		int year = e.Page;
		Console.WriteLine(e.Page);
		//e.Page //202011

		int month = year % 10; //todo tests
		year /= 10;
		month += year % 10 * 10;
		year /= 10;

		//MonthForInput = new DateTime(year, month, 1);
		_ = new DateTime(year, month, 1);

		//CurrentPage = e.Page;

		return UpdateCalendarGridAsync();
	}

	private async Task UpdateCalendarGridAsync()
	{
		//SortedList<int, Day> d = new(); todo?
		List<Day> days = await _stateService.GetAsync(Month!.Value.ToYearMonth()) ?? new List<Day>();

		foreach (DateTime day in Month.Value.AllDatesInMonth())
		{
			Day? dayItem = days.FirstOrDefault(d => d.DayNumber == day.Day);

			if (dayItem is null)
			{
				dayItem = new Day(day.Day, day.DayOfWeek is DayOfWeek.Saturday or DayOfWeek.Sunday);
				days.Add(dayItem);
			}

			dayItem.IsToday = false;
			if (DateTime.Now.Date == day)
			{
				dayItem!.IsToday = true;
			}
		}

		_days = days.OrderBy(d => d.DayNumber).ToList();

		StateHasChanged();

		_previousStateDayService.Load(_days);
	}


	//todo how to change url without reload?
	private void ChangeUrl(DateTime? d)
	{
		if (d is not null)
		{
			_nav.NavigateTo($"{RelativePageUrls.MonthEdit}/{d.Value.ToYearMonth()}");
		}
		else
		{
			_nav.NavigateTo(RelativePageUrls.MonthEdit);
		}
	}

	private bool UrlChanged(DateTime? newDate)
	=> newDate?.ToYearMonth() != Month?.ToYearMonth();

	private async Task HandleValidSubmitAsync()
	{
		_isTableSaving = true;

		await _stateService.SaveAsync(_days.CheckNotNull(nameof(_days)).Where(d => d.AnyRelevantValueExists()).ToList(), Month!.Value.ToYearMonth());

		_previousStateDayService.Update();

		_isTableSaving = false;

		StateHasChanged();
	}
	}
