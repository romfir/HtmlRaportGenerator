@attribute [RouteAttribute("/" + RelativePageUrls.MonthEdit + "/{Month:datetime?}")]

@inject NavigationManager Nav
@inject ILocalStorageService localStorage

<div class="container">
    <div class="row justify-content-center">
        <h1>
            <input type="month" @bind="MonthForInput" />
        </h1>
    </div>
</div>



@if (Days is null)
{
    <p><em>Loading...</em></p>
}
else
{
<EditForm Model="@_daysCollectionValidationModel" OnValidSubmit="@HandleValidSubmitAsync">
    <ObjectGraphDataAnnotationsValidator />

    <div class="table-responsive">
        <table class="table table-striped table-sm">
            <thead class="thead-dark">
                <tr>
                    <th>Day of month</th>
                    <th>Start time</th>
                    <th>End time</th>
                    <th>Hours Sum</th>
                </tr>
            </thead>
            <tbody>
                @foreach (Day day in Days.OrderBy(d => d.DayNumber))
                {

                    <DayListItem CurrentDay="day" HoursHaveChanged="() =>
                                                                    {
                                                                        UpdateHourSum();
                                                                        StateHasChanged();
                                                                    }
                                                                    " />
                }
            </tbody>
            <tfoot class="tfoot-dark">
                <tr>
                    <td></td>
                    <td></td>
                    <td><b>Sum:</b></td>
                    <td>@HoursSum</td>
                </tr>

            </tfoot>
        </table>
        </div>
        <button type="submit" class="btn btn-primary">Save</button>
</EditForm>
}

@code {

    private DateTime? _month;

    [Parameter]
    public DateTime? Month
    {
        get => _month;
        set
        {
            _month = value;
#pragma warning disable CS4014
            UpdateCalendarGridAsync();
#pragma warning restore CS4014
        }
    }

    public DateTime? MonthForInput
    {
        get => Month;
        set
        {
            ChangeUrl(value!.Value);
            Month = value;
        }
    }

    private DaysCollectionValidationModel _daysCollectionValidationModel = new();

    private IEnumerable<Day>? Days
                => _daysCollectionValidationModel.Days;

    private double HoursSum { get; set; }

    protected override void OnInitialized()
    {
        Month ??= DateTime.Now;
    }

    private async Task UpdateCalendarGridAsync()
    {
        List<Day> days = await localStorage.GetItemAsync<List<Day>>(Month!.Value.ToString(StaticHelpers.YearMonthFormat)) ?? new();

        foreach (DateTime day in Month.Value.AllDatesInMonth())
        {
            Day? dayItem = days.FirstOrDefault(d => d.DayNumber == day.Day);
            if (dayItem is null)
            {
                dayItem = new Day(day.Day, day.DayOfWeek is DayOfWeek.Saturday or DayOfWeek.Sunday);
                days.Add(dayItem);
            }

            dayItem.IsToday = false;
            if (DateTime.Now.Date == day.Date)
            {
                dayItem!.IsToday = true;
            }
        }

        _daysCollectionValidationModel.Days = days;

        UpdateHourSum();
        StateHasChanged();
    }

    private void UpdateHourSum()
        => HoursSum = Days!.Sum(d => d.HourSum ?? 0);

    void ChangeUrl(DateTime d)
        => Nav.NavigateTo($"{RelativePageUrls.MonthEdit}/{d:yyyy-MM}");

    private async Task HandleValidSubmitAsync()
        => await localStorage.SetItemAsync(Month!.Value.ToString(StaticHelpers.YearMonthFormat), Preconditions.CheckNotNull(Days!, nameof(Days)).Where(d => d.AnyRelevantValueExists()).ToList());
}
