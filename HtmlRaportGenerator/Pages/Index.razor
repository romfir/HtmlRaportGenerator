@attribute [RouteAttribute("/" + RelativePageUrls.MainView)]

@inject IModalService modalService
@inject MonthStateService stateService

<PageProgress Visible="_buttonState == DayInputState.DataLoading" />

@if (_buttonState != DayInputState.DataLoading)
{
    <Row Margin="Margin.Is4.FromBottom">
        <Column ColumnSize="ColumnSize.IsAuto" Margin="Margin.IsAuto">
            <Heading Size="HeadingSize.Is1" Alignment="TextAlignment.Center">@_currentDate.ToShortDateString()</Heading>
        </Column>
    </Row>
    <Row Margin="Margin.Is4.FromBottom" Display="Display.Flex">
        @if (CurrentDay?.From?.Hour is object)
        {
            <Column ColumnSize="ColumnSize.IsAuto" Margin="Margin.IsAuto">
                <Addons>
                    <Addon AddonType="AddonType.Start">
                        <AddonLabel>Shift Started</AddonLabel>
                    </Addon>
                    <Addon AddonType="AddonType.End" Class="text-center">
                        <AddonLabel>
                            @CurrentDay.From.GetHourWithQuarterSum()?.FormatDoubleToTime()
                        </AddonLabel>
                    </Addon>
                </Addons>
            </Column>
        }
        @if (CurrentDay?.To?.Hour is object)
        {
            <Column ColumnSize="ColumnSize.IsAuto" Margin="Margin.IsAuto">
                <Addons>
                    <Addon AddonType="AddonType.Start">
                        <AddonLabel>Shift Ended</AddonLabel>
                    </Addon>
                    <Addon AddonType="AddonType.End">
                        <AddonLabel>
                            @CurrentDay.To.GetHourWithQuarterSum()?.FormatDoubleToTime()
                        </AddonLabel>
                    </Addon>
                </Addons>
            </Column>
        }
    </Row>
    <Row Margin="Margin.Is4.FromBottom">
        <Column ColumnSize="ColumnSize.IsAuto" Margin="Margin.IsAuto">
            <Button Color="Color.Primary" Loading="IsButtonLoading" Disabled="IsButtonDisabled" Clicked="OnButtonClick" Margin="Margin.IsAuto">
                @ButtonText
            </Button>
        </Column>
    </Row>

    <HourInput @ref=_hourModalRef
           OnFormSubmitted="async (hourWithQuarter) => await OnFormSubmittedAsync(hourWithQuarter)"
           OnModalClosing="(closeReason) => OnModelClosing()"
           SetDefaultsToCurrentDate="true" />
}

@code
{
    private HourInput _hourModalRef = null!;

    private DayInputState? _buttonState = DayInputState.DataLoading;

    private DayInputState ButtonState
    {
        get
        {
            if (_buttonState is object)
            {
                return _buttonState.Value;
            }

            if (CurrentDay?.From?.Hour is null)
            {
                return DayInputState.ShiftNotStarted;
            }

            if (CurrentDay.To?.Hour is null)
            {
                return DayInputState.ShiftStarted;
            }

            return DayInputState.ShiftEnded;
        }
        set
        {
            if (value is DayInputState.AwaitingInput or DayInputState.DataLoading or DayInputState.DataSaving)
            {
                _buttonState = value;
            }
            else
            {
                _buttonState = null;
            }
        }
    }

    //todo create compoennt with this button state?
    private string ButtonText
         => ButtonState switch
         {
             DayInputState.DataLoading => "Loading...",
             DayInputState.DataSaving => "Saving...",
             DayInputState.ShiftNotStarted => "Start Shift",
             DayInputState.ShiftStarted => "End Shift",
             DayInputState.ShiftEnded => "Shift Ended",
             DayInputState.AwaitingInput => "Awaiting Input",
             _ => throw new InvalidOperationException()
         };


    private bool IsButtonDisabled
        => IsButtonLoading || ButtonState == DayInputState.ShiftEnded;

    private bool IsButtonLoading
        => ButtonState is DayInputState.DataSaving or DayInputState.DataLoading or DayInputState.AwaitingInput;

    private List<Day>? CurrentMonthDays { get; set; }

    private DateTime _currentDate = DateTime.Now;

    private string CurrentYearMonth
        => _currentDate.ToYearMonth();

    private Day? CurrentDay { get; set; }

    protected override async Task OnInitializedAsync()
    {
        ButtonState = DayInputState.DataLoading;

        CurrentMonthDays = await stateService.GetAsync(CurrentYearMonth).ConfigureAwait(false);
        int currentDayNumber = _currentDate.Day;

        if (CurrentMonthDays is null)
        {
            CurrentMonthDays = new List<Day>();
        }
        else
        {
            CurrentDay = CurrentMonthDays.FirstOrDefault(d => d.DayNumber == currentDayNumber);
        }

        if (CurrentDay is null)
        {
            CurrentDay = new Day(currentDayNumber);

            CurrentMonthDays.Add(CurrentDay);
        }

        ButtonState = (DayInputState)0;
    }

    private async Task OnFormSubmittedAsync(HourWithQuarter hourWithQuarter)
    {
        if (CurrentDay?.From?.Hour is null)
        {
            CurrentDay!.From = hourWithQuarter;
        }
        else if (CurrentDay.To?.Hour is null)
        {
            CurrentDay!.To = hourWithQuarter;
        }
        else
        {
            throw new InvalidOperationException();
        }

        ButtonState = DayInputState.DataSaving;

        await stateService.SaveAsync(CurrentMonthDays!, _currentDate!.ToYearMonth());

        ButtonState = (DayInputState)0;
    }

    private void OnModelClosing()
        => ButtonState = (DayInputState)0;


    private void OnButtonClick()
    {
        string title = null!;
        if (CurrentDay?.From?.Hour is null)
        {
            title = "Hour From";
        }
        else if (CurrentDay.To?.Hour is null)
        {
            title = "Hour To";
        }

        ButtonState = DayInputState.AwaitingInput;

        _hourModalRef.ShowModal(title);
    }
}

