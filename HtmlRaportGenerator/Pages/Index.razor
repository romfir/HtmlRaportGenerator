@using QuestPDF.Helpers
@using QuestPDF.Infrastructure
@using QuestPDF.Fluent
@using System.IO
@attribute [Route("/" + RelativePageUrls.MainView)]
@inject IHttpClientFactory _clientFactory
@inject IJSRuntime  JSRuntime
@inject MonthStateService _stateService

<PageProgress Visible="_buttonState == DayInputState.DataLoading" />

@if (_buttonState != DayInputState.DataLoading)
{
    <Row Margin="Margin.Is4.FromBottom.Is4.FromTop">
        <Column ColumnSize="ColumnSize.IsAuto" Margin="Margin.IsAuto">
            <Heading Size="HeadingSize.Is1" TextAlignment="TextAlignment.Center">@_currentDate.ToShortDateString()</Heading>
        </Column>
    </Row>
    <Row Margin="Margin.Is4.FromBottom" Display="Display.Flex">
        @if (CurrentDay?.From?.Hour is not null)
        {
            <WorkTimeAddon Clicked="() => _hourModalRef.ShowModal(HourFromTitle, CurrentDay.From, false)"
                   ButtonText="@CurrentDay.From.HourWithQuarterSum?.FormatDoubleToTime()"
                   LabelText="Shift Started" />
        }
        @if (CurrentDay?.To?.Hour is not null)
        {
            <WorkTimeAddon Clicked="() => _hourModalRef.ShowModal(HourToTitle, CurrentDay.To, false)"
                   ButtonText="@CurrentDay.To.HourWithQuarterSum?.FormatDoubleToTime()"
                   LabelText="Shift Ended" />
        }
    </Row>
    @if (CurrentDay?.From?.Hour is not null && CurrentDay.To?.Hour is not null)
    {
        <Row Margin="Margin.Is4.FromBottom" Display="Display.Flex">
            <Column ColumnSize="ColumnSize.IsAuto" Margin="Margin.IsAuto">
                <Addons>
                    <Addon AddonType="AddonType.Start">
                        <AddonLabel>
                            Time Worked
                        </AddonLabel>
                    </Addon>
                    <Addon AddonType="AddonType.End">
                        <AddonLabel>
                            @CurrentDay.HourSum?.FormatDoubleToTime()
                        </AddonLabel>
                    </Addon>
                </Addons>
            </Column>
        </Row>
    }
    <Row Margin="Margin.Is4.FromBottom">
        <Column ColumnSize="ColumnSize.IsAuto" Margin="Margin.IsAuto">
            <Button Color="Color.Primary" Loading="IsButtonLoading" Disabled="IsButtonDisabled" Clicked="OnButtonClick" Margin="Margin.IsAuto">
                @ButtonText
            </Button>
        </Column>
    </Row>

    <HourInput @ref=_hourModalRef
           OnFormSubmitted="async () => await OnFormSubmittedAsync()"
           OnFormCancel="OnFormCancel"
           HoursHaveChanged="StateHasChanged" />

    <Button Clicked="Foo">Click Me</Button>
}

@code
{
    private async Task Foo()
    {
        var s = new MemoryStream();

        var x = new HttpClient();


       // var stream = await x.GetStreamAsync(@"https://github.com/matomo-org/travis-scripts/blob/master/fonts/Arial.ttf?raw=true");

        

        //todo [dr] cache font on the drive on startup?

        var client = _clientFactory.CreateClient("LocalFiles");

        QuestPDF.Drawing.FontManager.RegisterFont(await client.GetStreamAsync("calibri.ttf"));
        // QuestPDF.Drawing.FontManager.RegisterFont(File.OpenRead();

        Document.Create(container =>
        {
            container.Page(page =>
            {
                page.Size(PageSizes.A4);
                page.Margin(2, Unit.Centimetre);
                page.PageColor(Colors.White);
                page.DefaultTextStyle(x => x.FontSize(20));

                page.Header()
                    .Text("Hello PDF!")
                    .SemiBold().FontSize(36).FontColor(Colors.Blue.Medium);

                page.Content()
                    .PaddingVertical(1, Unit.Centimetre)
                    .Column(x =>
                    {
                        x.Spacing(20);

                        x.Item().Text(Placeholders.LoremIpsum());
                        x.Item().Image(Placeholders.Image(200, 100));
                    });

                page.Footer()
                    .AlignCenter()
                    .Text(x =>
                    {
                        x.Span("Page ");
                        x.CurrentPageNumber();
                    });
            });
        })
            //.GeneratePdf(s);
            .GeneratePdf(s);

        Console.WriteLine(s.Length);
        //todo [dr] https://github.com/arivera12/BlazorDownloadFile

        await JSRuntime.InvokeVoidAsync("BlazorDownloadFile", "file.pdf", "application/pdf", s.ToArray());
    }

    private const string HourFromTitle = "Hour From";
    private const string HourToTitle = "Hour To";

    private HourInput _hourModalRef = null!;

    private DayInputState _buttonState = DayInputState.DataLoading;

    private DayInputState ButtonState
    {
        get
        {
            if (_buttonState != DayInputState.None)
            {
                return _buttonState;
            }

            if (CurrentDay?.From?.Hour is null)
            {
                return DayInputState.ShiftNotStarted;
            }

            if (CurrentDay.To?.Hour is null)
            {
                return DayInputState.ShiftStarted;
            }

            return DayInputState.ShiftEnded;
        }
        set
        {
            if (value is DayInputState.AwaitingInput or DayInputState.DataLoading or DayInputState.DataSaving)
            {
                _buttonState = value;
            }
            else
            {
                _buttonState = DayInputState.None;
            }
        }
    }

    private string ButtonText
            => ButtonState switch
            {
                DayInputState.DataLoading => "Loading...",
                DayInputState.DataSaving => "Saving...",
                DayInputState.ShiftNotStarted => "Start Shift",
                DayInputState.ShiftStarted => "End Shift",
                DayInputState.ShiftEnded => "Shift Ended",
                DayInputState.AwaitingInput => "Awaiting Input",
                _ => throw new InvalidOperationException()
            };


    private bool IsButtonDisabled
        => IsButtonLoading || ButtonState == DayInputState.ShiftEnded;

    private bool IsButtonLoading
        => ButtonState is DayInputState.DataSaving or DayInputState.DataLoading or DayInputState.AwaitingInput;

    private List<Day>? CurrentMonthDays { get; set; }

    private readonly DateOnly _currentDate = DateOnly.FromDateTime(DateTime.Now);

    private string CurrentYearMonth
        => _currentDate.ToYearMonth();

    private Day? CurrentDay { get; set; }

    protected override async Task OnInitializedAsync()
    {
        ButtonState = DayInputState.DataLoading;

        CurrentMonthDays = (await _stateService.GetAsync(CurrentYearMonth).ConfigureAwait(false))?.ToList();
        int currentDayNumber = _currentDate.Day;

        if (CurrentMonthDays is null)
        {
            CurrentMonthDays = new List<Day>();
        }
        else
        {
            CurrentDay = CurrentMonthDays.FirstOrDefault(d => d.DayNumber == currentDayNumber);
        }

        if (CurrentDay is null)
        {
            CurrentDay = new Day(currentDayNumber);

            CurrentMonthDays.Add(CurrentDay);
        }

        ButtonState = 0;
    }

    private async Task OnFormSubmittedAsync()
    {
        ButtonState = DayInputState.DataSaving;

        await _stateService.SaveAsync(CurrentMonthDays!, _currentDate!.ToYearMonth());

        ButtonState = 0;
    }

    private void OnFormCancel(HourWithQuarter? modelToDelete)
    {
        if (modelToDelete is null)
        {
            ButtonState = 0;
            return;
        }

        if (CurrentDay!.From == modelToDelete)
        {
            CurrentDay.From.Clear();
        }
        else if (CurrentDay.To == modelToDelete)
        {
            CurrentDay.To.Clear();
        }

        StateHasChanged();

        ButtonState = 0;
    }

    private void OnButtonClick()
    {
        string title = null!;
        HourWithQuarter model = new(DateTime.Now);
        if (CurrentDay!.From?.Hour is null)
        {
            title = HourFromTitle;
            CurrentDay.From = model;
        }
        else if (CurrentDay.To?.Hour is null)
        {
            title = HourToTitle;
            CurrentDay.To = model;
        }

        ButtonState = DayInputState.AwaitingInput;

        _hourModalRef.ShowModal(title, model, true);
    }
}