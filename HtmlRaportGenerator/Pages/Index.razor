@attribute [RouteAttribute("/" + RelativePageUrls.MainView)]

@inject IModalService modalService
@inject MonthStateService stateService

<PageProgress Visible="_buttonState == DayInputState.DataLoading" />

@if (_buttonState != DayInputState.DataLoading)
{
    <Row Margin="Margin.Is4.FromBottom">
        <Column ColumnSize="ColumnSize.IsAuto" Margin="Margin.IsAuto">
            <Heading Size="HeadingSize.Is1" Alignment="TextAlignment.Center">@_currentDate.ToShortDateString()</Heading>
        </Column>
    </Row>
    <Row Margin="Margin.Is4.FromBottom" Display="Display.Flex">
        @if (CurrentDay?.From?.Hour is object)
        {
            <Column ColumnSize="ColumnSize.IsAuto" Margin="Margin.IsAuto">
                <Addons>
                    <Addon AddonType="AddonType.Start">
                        <AddonLabel>Shift Started</AddonLabel>
                    </Addon>
                    <Addon AddonType="AddonType.End" Class="text-center">
                        <AddonLabel>
                            @CurrentDay.From.GetHourWithQuarterSum()?.FormatDoubleToTime()
                        </AddonLabel>
                    </Addon>
                </Addons>
            </Column>
        }
        @if (CurrentDay?.To?.Hour is object)
        {
            <Column ColumnSize="ColumnSize.IsAuto" Margin="Margin.IsAuto">
                <Addons>
                    <Addon AddonType="AddonType.Start">
                        <AddonLabel>Shift Ended</AddonLabel>
                    </Addon>
                    <Addon AddonType="AddonType.End">
                        <AddonLabel>
                            @CurrentDay.To.GetHourWithQuarterSum()?.FormatDoubleToTime()
                        </AddonLabel>
                    </Addon>
                </Addons>
            </Column>
        }
    </Row>
    <Row Margin="Margin.Is4.FromBottom">
        <Column ColumnSize="ColumnSize.IsAuto" Margin="Margin.IsAuto">
            <Button Color="Color.Primary" Loading="IsButtonLoading" Disabled="IsButtonDisabled" Clicked="OnButtonClickAsync" Margin="Margin.IsAuto">
                @ButtonText
            </Button>
        </Column>
    </Row>
}

@code
{

    private DayInputState _buttonState = DayInputState.DataLoading;

    private string ButtonText
         => _buttonState switch
         {
             DayInputState.DataLoading => "Loading...",
             DayInputState.DataSaving => "Saving...",
             DayInputState.ShiftNotStarted => "Start Shift",
             DayInputState.ShiftStarted => "End Shift",
             DayInputState.ShiftEnded => "Shift Ended",
             DayInputState.AwaitingInput => "Awaiting Input",
             _ => throw new InvalidOperationException()
         };


    private bool IsButtonDisabled
        => IsButtonLoading || _buttonState == DayInputState.ShiftEnded;

    private bool IsButtonLoading
        => _buttonState is DayInputState.DataSaving or DayInputState.DataLoading or DayInputState.AwaitingInput;

    private List<Day>? CurrentMonthDays { get; set; }

    private DateTime _currentDate = DateTime.Now;

    private string CurrentYearMonth
        => _currentDate.ToYearMonth();

    private Day? CurrentDay { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _buttonState = DayInputState.DataLoading;

        CurrentMonthDays = await stateService.GetAsync(CurrentYearMonth).ConfigureAwait(false);
        int currentDayNumber = _currentDate.Day;

        if (CurrentMonthDays is null)
        {
            CurrentMonthDays = new List<Day>();
        }
        else
        {
            CurrentDay = CurrentMonthDays.FirstOrDefault(d => d.DayNumber == currentDayNumber);
        }

        if (CurrentDay is null)
        {
            CurrentDay = new Day(currentDayNumber);

            CurrentMonthDays.Add(CurrentDay);

            _buttonState = DayInputState.ShiftNotStarted;

            return;
        }

        if (CurrentDay.To?.Hour is object)
        {
            _buttonState = DayInputState.ShiftEnded;

            return;
        }

        if (CurrentDay.From?.Hour is object)
        {
            _buttonState = DayInputState.ShiftStarted;
        }
    }

    async Task OnButtonClickAsync()
    {
        DayInputState previousState = _buttonState;
        _buttonState = DayInputState.AwaitingInput;

        ModalOptions options = new()
        {
            HideCloseButton = true,
            DisableBackgroundCancel = true
        };

        ModalParameters parameters = new();

        parameters.Add(nameof(HourInputModal.CurrentDate), _currentDate);
        parameters.Add(nameof(HourInputModal.SetDefaultsToCurrentDate), true);

        IModalReference hourInputModal = modalService.Show<HourInputModal>(ButtonText, parameters, options);


        ModalResult result = await hourInputModal.Result;

        if (result.Cancelled)
        {
            _buttonState = previousState;
            return;
        }

        if (previousState == DayInputState.ShiftNotStarted)
        {
            CurrentDay!.From = (HourWithQuarter)result.Data;

            _buttonState = DayInputState.ShiftStarted;
        }
        else
        {
            CurrentDay!.To = (HourWithQuarter)result.Data;

            _buttonState = DayInputState.ShiftEnded;
        }

        await stateService.SaveAsync(Preconditions.CheckNotNull(CurrentMonthDays!, nameof(CurrentMonthDays)), _currentDate!.ToString(StaticHelpers.YearMonthFormat));
    }
}

