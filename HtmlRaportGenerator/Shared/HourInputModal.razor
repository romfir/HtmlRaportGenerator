<Row>
    <Column ColumnSize="ColumnSize.IsAuto" Margin="Margin.IsAuto">
        <Heading Size="HeadingSize.Is2" Alignment="TextAlignment.Center"> @CurrentDate.ToShortDateString()</Heading>
    </Column>
</Row>

<Validations Mode="ValidationMode.Auto" Model="@HourWithQuarter" @ref="validations">
    <Fields>
        <Validation>
            <Field ColumnSize="ColumnSize.Is6">
                <FieldLabel>Hour</FieldLabel>
                <Select TValue="int?" @bind-SelectedValue="HourWithQuarter.Hour">
                    <ChildContent>
                        @foreach (int i in Enumerable.Range(0, 24))
                                {
                        <SelectItem Value="@i">@i</SelectItem>
                        }
                    </ChildContent>
                    <Feedback>
                        <ValidationNone />
                        <ValidationSuccess />
                        <ValidationError />
                    </Feedback>
                </Select>
            </Field>
        </Validation>
        <Validation>
            <Field ColumnSize="ColumnSize.Is6">
                <FieldLabel>Minutes</FieldLabel>
                <Select TValue="int?" @bind-SelectedValue="HourWithQuarter.Quarter">
                    <ChildContent>
                        @foreach (int i in Enumerable.Range(0, 4))
                                {
                        <SelectItem Value="@i">@(i*15)</SelectItem>
                        }
                    </ChildContent>
                    <Feedback>
                        <ValidationNone />
                        <ValidationSuccess />
                        <ValidationError />
                    </Feedback>
                </Select>
            </Field>
        </Validation>
    </Fields>
    <Row>
        <Column ColumnSize="ColumnSize.IsAuto" Margin="Margin.IsAuto">
            <Button Color="Color.Primary" Clicked="x => Submit()">Submit</Button>
        </Column>
        <Column ColumnSize="ColumnSize.IsAuto" Margin="Margin.IsAuto">
            <Button Color="Color.Secondary" Clicked="Cancel">Cancel</Button>
        </Column>
    </Row>


</Validations>

@code {

    private Validations? validations;

    async Task Submit()
    {
        if (validations!.ValidateAll())
        {
            await SubmitFormAsync();
        }
    }

    [CascadingParameter]
    BlazoredModalInstance BlazoredModal { get; set; } = null!;

    [Parameter]
    public DateTime CurrentDate { get; set; }

    [Parameter]
    public HourWithQuarter HourWithQuarter { get; set; } = null!;

    [Parameter]
    public bool SetDefaultsToCurrentDate { get; set; }

    protected override void OnInitialized()
    {
        if (HourWithQuarter is null)
        {
            if (SetDefaultsToCurrentDate)
            {
                HourWithQuarter = new HourWithQuarter(CurrentDate);
            }
            else
            {
                HourWithQuarter = new HourWithQuarter(0);
            }
        }

        if (HourWithQuarter.Hour is null)
        {
            HourWithQuarter.Hour = 0;
        }

        if (HourWithQuarter.Quarter is null)
        {
            HourWithQuarter.Quarter = 0;
        }

    }

    private Task SubmitFormAsync()
        => BlazoredModal.CloseAsync(ModalResult.Ok(HourWithQuarter));

    private Task Cancel()
        => BlazoredModal.CancelAsync();
}